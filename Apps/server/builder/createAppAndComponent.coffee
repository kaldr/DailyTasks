import {Meteor} from 'meteor/meteor'
import status from '/imports/configs/status.coffee'

fs = require 'fs'
_ = require 'lodash'
path = require 'path'

basePath = path.resolve('.').split('.meteor')[0]
importsPath = basePath + 'imports/'
componentPath = importsPath + 'components/'
apiPath = importsPath + 'api/'
configsPath = importsPath + "configs/"

noCamelAppName = (appname) ->
  appname

###
  coffee模版
  @method coffeeTemplate
  @return {object} 模版信息
###
coffeeTemplate = () ->
  file = importsPath + "plugins/util/file_output/template/component.coffee"
  str = fs.readFileSync file
    .toString()
  {
    file: file
    template: str
    type: 'coffee'
  }

###
  生成coffee文件的内容
  @method coffeeFileContent
  @param {string} appname app名称
  @return {object}
###
coffeeFileContent = (appname) ->
  app_name = noCamelAppName appname
  file = importsPath + "plugins/util/file_output/template/component.coffee"
  str = fs.readFileSync file
    .toString()
  str = "# generated by builder@0.1.0\n" + str
  str = str
    .replace /_class_name_no_camel/g, app_name
    .replace /_class_name/g, appname
  str

stylFileContent = (appname) ->
  "// #{appname}\n// generated by builder@0.1.0"

stylComponentContent = (appname, componentName) ->
  "// #{appname} #{componentName}\n// generated by builder@0.1.0"

jadeFileContent = (appname) ->
  "// generated by builder@0.1.0\n.#{appname} This is a template for #{appname}, you can visit it by \n\ta(href='/building/#{appname}') /building/#{appname}"

jadeComponentContent = (appname, componentName) ->
  "// generated by builder@0.1.0\n.#{componentName} This is a template for app #{appname}'s component #{componentName}."

###
  创建一个组件
  @method createComponent
  @param {string} appname app名字
  @param {string} componentName 组件名字
  @return {object} 创建的结果
###
createComponent = (appname, componentName) ->
  coffeeFileStr = coffeeFileContent componentName
  jadeFileStr = jadeComponentContent appname, componentName
  stylusFileStr = stylComponentContent appname, componentName
  if not fs.existsSync "#{componentPath}#{appname}/" #app不存在
    return status.return_status 'createComponent', 3

  if fs.existsSync "#{componentPath}#{appname}/#{componentName}/" #component已经存在
    return status.return_status 'createComponent', 2
  else#component不存在
    fs.mkdirSync "#{componentPath}#{appname}/#{componentName}/"
    fs.writeFileSync "#{componentPath}#{appname}/#{componentName}/index.coffee"
    fs.writeFileSync "#{componentPath}#{appname}/#{componentName}/#{componentName}.coffee", coffeeFileStr
    fs.writeFileSync "#{componentPath}#{appname}/#{componentName}/#{componentName}.ng.jade", jadeFileStr
    fs.writeFileSync "#{componentPath}#{appname}/#{componentName}/#{componentName}.styl", stylusFileStr
    files = [
      "#{componentPath}#{appname}/#{componentName}/index.coffee"
      "#{componentPath}#{appname}/#{componentName}/#{componentName}.coffee"
      "#{componentPath}#{appname}/#{componentName}/#{componentName}.ng.jade"
      "#{componentPath}#{appname}/#{componentName}/#{componentName}.styl"
    ]
    folders = [
      "#{componentPath}#{appname}/#{componentName}/"
    ]
    output = status.return_status 'createComponent', 1
    output.files = files
    output.folders = folders
    return output



###
  创建APP
  @method createApp
  @param {string} appname app名字
  @return {object} 创建结果
###
createApp = (appname) ->
  coffeeFileStr = coffeeFileContent appname
  jadeFileStr = jadeFileContent appname
  stylusFileStr = stylFileContent appname
  if fs.existsSync "#{componentPath}#{appname}/" #app已经存在
    return status.return_status 'createApp', 2
  else#app 不存在
    fs.mkdirSync "#{componentPath}#{appname}/"
    fs.writeFileSync "#{componentPath}#{appname}/index.coffee"
    fs.writeFileSync "#{componentPath}#{appname}/#{appname}.coffee",coffeeFileStr
    fs.writeFileSync "#{componentPath}#{appname}/#{appname}.ng.jade", jadeFileStr
    fs.writeFileSync "#{componentPath}#{appname}/#{appname}.styl", stylusFileStr
    files = [
      "#{componentPath}#{appname}/index.coffee"
      "#{componentPath}#{appname}/#{appname}.coffee"
      "#{componentPath}#{appname}/#{appname}.ng.jade"
      "#{componentPath}#{appname}/#{appname}.styl"
    ]
    folders = [
      "#{componentPath}#{appname}/"
    ]
    output = status.return_status 'createApp', 1
    output.files = files
    output.folders = folders
    return output

if Meteor.isServer
  Meteor.methods
    createApp: createApp
    createComponent: createComponent
    coffeeTemplate: coffeeTemplate
